
#include <iostream>    //for cout
#include <fstream>     // for ofstream/ifstream
#include <string>     //for << and getline

//struct file_element
//{
//	std::string line;
//	int line_no;
//};


struct file_element
{
	union MyUnion
	{
		std::string line = "";
		int line_no;
		MyUnion() {}
		~MyUnion() {}
	};
};

//union file_element
//{
//	std::string line ="";
//	int line_no;
//	file_element (){}
//	~file_element(){}
//};

int main()
{
	std::string in_file = "test.txt";
	std::ifstream input_file(in_file.c_str());

	std::string out_file = "test.txt.out";
	std::ofstream output_file(out_file.c_str());

	//file_element elements[25];
	file_element::MyUnion elements[3];

	std::string line;

	for (int line_no = 1; std::getline(input_file, line); ++line_no)
	{
		//file_element element;
		file_element::MyUnion element;	
		element.line = line;
		element.line_no = line_no;

		//elements[line_no].line = line;
		//elements[line_no].line_no = line_no;
		//elements[line_no] = element;// wont work for unions,but works for structs
		elements[line_no].line = element.line;
		elements[line_no].line_no = element.line_no;
	}

	for (int line_no = 1; line_no < 3; line_no++)
	{
		std::cout << "LINE " << elements[ line_no].line_no << ":" << elements[line_no].line << std::endl;
		std::cout << "LINE " << &elements[line_no].line_no << ":" << &elements[line_no].line << std::endl;
		output_file << "LINE " << elements[ line_no].line_no << ":" << elements[line_no].line << std::endl;
		output_file << "LINE " << &elements[line_no].line_no << ":" << &elements[line_no].line << std::endl;
	}

	if (input_file)
	{
		input_file.close();
		output_file.close();
	}
	std::cin.get();
	return 0;
}
