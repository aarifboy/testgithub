
//Header.h is a header file

#pragma once

#ifndef ELEMENTS
#define ELEMENTS

void pullout_contents(std::string in_file, std::string elements[]);
void show_contents(const std::string elements[]);
void pushin_contents(std::string out_file, const std::string elements[]);

#endif // !ELEMENTS

//Source.cpp is one source file

#include <iostream>    //for cout
#include <fstream>     // for ofstream/ifstream
#include <string>     //for << and getline
#include "Header.h"

//void pullout_contents(std::string in_file, std::string elements[]);
//void show_contents(const std::string elements[]);
//void pushin_contents(std::string out_file, const std::string elements[]);

int main()
{
	std::string in_file = "test.txt";

	std::string out_file = "test.txt.out";

	std::string elements[100];

	pullout_contents(in_file, elements);

	show_contents(elements);

	pushin_contents(out_file, elements);

	std::cin.get();
	return 0;
}


//Program.cpp is another source file

#include <iostream>    //for cout
#include <fstream>     // for ofstream/ifstream
#include <string>     //for << and getline

void pullout_contents(std::string in_file, std::string elements[])
{
	std::ifstream input_file(in_file.c_str());

	std::string line;
	for (int line_no = 1; std::getline(input_file, line); ++line_no)
	{
		elements[line_no] = line;
	}

	input_file.close();
}

void show_contents(const std::string elements[])
{
	for (int line_no = 1; line_no < 3; line_no++)
	{
		std::cout << elements[line_no] << std::endl;
	}
}

void pushin_contents(std::string out_file, const std::string elements[])
{
	std::ofstream output_file(out_file.c_str());

	for (int line_no = 1; line_no < 3; line_no++)
	{
		output_file << elements[line_no] << std::endl;
	}

	output_file.close();
}

# This is make file for c++
#all:

#compile:
#	g++ *.cpp -o Source
#	g++ Source.cpp Program.cpp -o Source

#run:
#	./Source test.txt
	

CXX=g++
CXXFLAGS=-Wall -g

all:compile

compile:Source.o Program.o	
#	g++ *.o -o Source
#	g++ -Wall -g Source.o Program.o -o Source
	$(CXX) $(CXXFLAGS) Source.o Program.o -o Source
	
source.o:Source.cpp
#	g++ -c Source.cpp
#	$(CXX) -c Source.cpp
	@(CXX) -c Source.cpp
program.o:Program.cpp
#	g++ -c Program.cpp
#	$(CXX) -c Program.cpp
	@(CXX) -c Program.cpp

clean:
	rm *.o Source test.txt.out
